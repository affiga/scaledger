"""An account to which every posting belongs."""
type Account implements Node {
  """An alphanumeric account code to identify the account."""
  code: String

  """The account’s time created."""
  createdAt: Datetime

  """The primary unique identifier for the account."""
  id: UUID!

  """A dictionary of arbitrary key-values."""
  metadata: JSON

  """The account’s name."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Posting`."""
  postingsByCreditId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostingsConnection!

  """Reads and enables pagination through a set of `Posting`."""
  postingsByDebitId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostingsConnection!

  """The account’s type."""
  type: AccountType!

  """The account’s last updated time."""
  updatedAt: Datetime
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: AccountType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  """An alphanumeric account code to identify the account."""
  code: String

  """A dictionary of arbitrary key-values."""
  metadata: JSON

  """The account’s name."""
  name: String!

  """The account’s type."""
  type: AccountType!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  """An alphanumeric account code to identify the account."""
  code: String

  """A dictionary of arbitrary key-values."""
  metadata: JSON

  """The account’s name."""
  name: String

  """The account’s type."""
  type: AccountType
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """A list of `Account` objects."""
  nodes: [Account]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  CODE_ASC
  CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""The possible types of accounts"""
enum AccountType {
  ASSET
  CONTRA
  EQUITY
  EXPENSE
  LIABILITY
  REVENUE
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A connection to a list of `Commodity` values."""
type CommoditiesConnection {
  """
  A list of edges which contains the `Commodity` and cursor to aid in pagination.
  """
  edges: [CommoditiesEdge!]!

  """A list of `Commodity` objects."""
  nodes: [Commodity]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Commodity` you could get from the connection."""
  totalCount: Int!
}

"""A `Commodity` edge in the connection."""
type CommoditiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Commodity` at the end of the edge."""
  node: Commodity
}

"""Methods to use when ordering `Commodity`."""
enum CommoditiesOrderBy {
  CODE_ASC
  CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A type of asset (commodity) that postings are denominated in."""
type Commodity implements Node {
  """An ISO 4217 code"""
  code: String!

  """The commodity’s time created."""
  createdAt: Datetime

  """The primary unique identifier for the commodity."""
  id: UUID!

  """A common name/label for the commodity."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Posting`."""
  postings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostingsConnection!

  """The commodity’s last updated time."""
  updatedAt: Datetime
}

"""
A condition to be used against `Commodity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CommodityCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Commodity`"""
input CommodityInput {
  """An ISO 4217 code"""
  code: String!

  """A common name/label for the commodity."""
  name: String!
}

"""
Represents an update to a `Commodity`. Fields that are set will be updated.
"""
input CommodityPatch {
  """An ISO 4217 code"""
  code: String

  """A common name/label for the commodity."""
  name: String
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """The `Account` to be created by this mutation."""
  account: AccountInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """The `Account` that was created by this mutation."""
  account: Account

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Commodity` mutation."""
input CreateCommodityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Commodity` to be created by this mutation."""
  commodity: CommodityInput!
}

"""The output of our create `Commodity` mutation."""
type CreateCommodityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Commodity` that was created by this mutation."""
  commodity: Commodity

  """An edge for our `Commodity`. May be used by Relay 1."""
  commodityEdge(
    """The method to use when ordering `Commodity`."""
    orderBy: [CommoditiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommoditiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Posting` mutation."""
input CreatePostingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Posting` to be created by this mutation."""
  posting: PostingInput!
}

"""The output of our create `Posting` mutation."""
type CreatePostingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Commodity` that is related to this `Posting`."""
  commodity: Commodity

  """Reads a single `Account` that is related to this `Posting`."""
  credit: Account

  """Reads a single `Account` that is related to this `Posting`."""
  debit: Account

  """The `Posting` that was created by this mutation."""
  posting: Posting

  """An edge for our `Posting`. May be used by Relay 1."""
  postingEdge(
    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A global ledger view of all accounts"""
type Ledger {
  accountId: UUID
  accountName: String
  balance: BigFloat
  commodityCode: String
  commodityId: UUID
  commodityName: String
}

"""
A condition to be used against `Ledger` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LedgerCondition {
  """Checks for equality with the object’s `accountId` field."""
  accountId: UUID

  """Checks for equality with the object’s `accountName` field."""
  accountName: String

  """Checks for equality with the object’s `balance` field."""
  balance: BigFloat

  """Checks for equality with the object’s `commodityCode` field."""
  commodityCode: String

  """Checks for equality with the object’s `commodityId` field."""
  commodityId: UUID

  """Checks for equality with the object’s `commodityName` field."""
  commodityName: String
}

"""A connection to a list of `Ledger` values."""
type LedgersConnection {
  """
  A list of edges which contains the `Ledger` and cursor to aid in pagination.
  """
  edges: [LedgersEdge!]!

  """A list of `Ledger` objects."""
  nodes: [Ledger]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ledger` you could get from the connection."""
  totalCount: Int!
}

"""A `Ledger` edge in the connection."""
type LedgersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ledger` at the end of the edge."""
  node: Ledger
}

"""Methods to use when ordering `Ledger`."""
enum LedgersOrderBy {
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  ACCOUNT_NAME_ASC
  ACCOUNT_NAME_DESC
  BALANCE_ASC
  BALANCE_DESC
  COMMODITY_CODE_ASC
  COMMODITY_CODE_DESC
  COMMODITY_ID_ASC
  COMMODITY_ID_DESC
  COMMODITY_NAME_ASC
  COMMODITY_NAME_DESC
  NATURAL
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `Commodity`."""
  createCommodity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommodityInput!
  ): CreateCommodityPayload

  """Creates a single `Posting`."""
  createPosting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostingInput!
  ): CreatePostingPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByNodeIdInput!
  ): UpdateAccountPayload

  """Updates a single `Commodity` using a unique key and a patch."""
  updateCommodity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommodityInput!
  ): UpdateCommodityPayload

  """Updates a single `Commodity` using its globally unique id and a patch."""
  updateCommodityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommodityByNodeIdInput!
  ): UpdateCommodityPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""A record of a credit/debt (amount) on an account."""
type Posting implements Node {
  """The amount (credit/debit) applied in the transaction."""
  amount: Int!

  """Reads a single `Commodity` that is related to this `Posting`."""
  commodity: Commodity

  """The kind of asset class the amount is denominated in."""
  commodityId: UUID!

  """The posting’s time created."""
  createdAt: Datetime

  """Reads a single `Account` that is related to this `Posting`."""
  credit: Account

  """The account to which the amount is credited."""
  creditId: UUID!

  """Reads a single `Account` that is related to this `Posting`."""
  debit: Account

  """The account to which the amount is debited."""
  debitId: UUID!
  externalId: String!

  """The primary unique identifier for the posting."""
  id: UUID!

  """A dictionary of arbitrary key-values."""
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Posting` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostingCondition {
  """Checks for equality with the object’s `amount` field."""
  amount: Int

  """Checks for equality with the object’s `commodityId` field."""
  commodityId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `creditId` field."""
  creditId: UUID

  """Checks for equality with the object’s `debitId` field."""
  debitId: UUID

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON
}

type PostingCreatedSubscriptionPayload {
  event: String
  posting: Posting
}

"""An input for mutations affecting `Posting`"""
input PostingInput {
  """The amount (credit/debit) applied in the transaction."""
  amount: Int!

  """The kind of asset class the amount is denominated in."""
  commodityId: UUID!

  """The account to which the amount is credited."""
  creditId: UUID!

  """The account to which the amount is debited."""
  debitId: UUID!
  externalId: String!

  """A dictionary of arbitrary key-values."""
  metadata: JSON
}

"""A connection to a list of `Posting` values."""
type PostingsConnection {
  """
  A list of edges which contains the `Posting` and cursor to aid in pagination.
  """
  edges: [PostingsEdge!]!

  """A list of `Posting` objects."""
  nodes: [Posting]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Posting` you could get from the connection."""
  totalCount: Int!
}

"""A `Posting` edge in the connection."""
type PostingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Posting` at the end of the edge."""
  node: Posting
}

"""Methods to use when ordering `Posting`."""
enum PostingsOrderBy {
  AMOUNT_ASC
  AMOUNT_DESC
  COMMODITY_ID_ASC
  COMMODITY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREDIT_ID_ASC
  CREDIT_ID_DESC
  DEBIT_ID_ASC
  DEBIT_ID_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  account(id: UUID!): Account

  """Reads a single `Account` using its globally unique `ID`."""
  accountByNodeId(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsConnection

  """Reads and enables pagination through a set of `Commodity`."""
  commodities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommodityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commodity`."""
    orderBy: [CommoditiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommoditiesConnection
  commodity(id: UUID!): Commodity

  """Reads a single `Commodity` using its globally unique `ID`."""
  commodityByNodeId(
    """The globally unique `ID` to be used in selecting a single `Commodity`."""
    nodeId: ID!
  ): Commodity

  """Reads and enables pagination through a set of `Ledger`."""
  ledgers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LedgerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ledger`."""
    orderBy: [LedgersOrderBy!] = [NATURAL]
  ): LedgersConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  posting(id: UUID!): Posting

  """Reads a single `Posting` using its globally unique `ID`."""
  postingByNodeId(
    """The globally unique `ID` to be used in selecting a single `Posting`."""
    nodeId: ID!
  ): Posting

  """Reads and enables pagination through a set of `Posting`."""
  postings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Posting`."""
    orderBy: [PostingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostingsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  postingCreated: PostingCreatedSubscriptionPayload
}

"""All input for the `updateAccountByNodeId` mutation."""
input UpdateAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the account."""
  id: UUID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """The `Account` that was updated by this mutation."""
  account: Account

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCommodityByNodeId` mutation."""
input UpdateCommodityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Commodity` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Commodity` being updated.
  """
  patch: CommodityPatch!
}

"""All input for the `updateCommodity` mutation."""
input UpdateCommodityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the commodity."""
  id: UUID!

  """
  An object where the defined keys will be set on the `Commodity` being updated.
  """
  patch: CommodityPatch!
}

"""The output of our update `Commodity` mutation."""
type UpdateCommodityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Commodity` that was updated by this mutation."""
  commodity: Commodity

  """An edge for our `Commodity`. May be used by Relay 1."""
  commodityEdge(
    """The method to use when ordering `Commodity`."""
    orderBy: [CommoditiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommoditiesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
